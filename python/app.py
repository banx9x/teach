# def hof(func):
#     def inner(p1, p2):
#         print("M·ªü r·ªông h√†m")
#         print("V·ªõi m√£ b√™n ngo√†i")
#         print("M√† kh√¥ng l√†m thay ƒë·ªïi n·ªôi dung h√†m")
#         func(p1, p2)  # g·ªçi h√†m, h√†m ƒë∆∞·ª£c g·ªçi trong hof

#     return inner


# def func(p1, p2):
#     print(p1)
#     print(p2)


# func = hof(func)  # func = inner

# func(135, "D·ªØ li·ªáu")  # inner(135, "D·ªØ li·ªáu")

# # t∆∞∆°ng t·ª± v·ªõi


# @hof
# def func(p1, p2):  # func ·ªü ƒë√¢y l√† inner
#     print(p1)
#     print(p2)


# func(135, "D·ªØ li·ªáu")

# # v·∫≠y n√™n n·∫øu mu·ªën truy·ªÅn param v√†o th√¨ truy·ªÅn v√†o inner() ho·∫∑c hof() ƒë·ªÉ func() s·ª≠ d·ª•ng th√¥i


# class Complex:
#     # H√†m kh·ªüi t·∫°o, nh·∫≠n 2 tham s·ªë real v√† imag
#     def __init__(self, real, imag) -> None:
#         super().__init__()
#         self.real = float(real)  # g√°n cho 2 instance variable t∆∞∆°ng ·ª©ng
#         self.imag = float(imag)

#     def __str__(self) -> str:  # __str__ chuy·ªÉn ƒë·ªïi object v·ªÅ d·∫°ng chu·ªói
#         return f"({self.real}, i{self.imag})"

#     def __add__(self, other):  # __add__, __sub__, ... s·ª≠ d·ª•ng khi th·ª±c hi·ªán ph√©p t√≠nh 2 object t∆∞∆°ng ·ª©ng
#         return f"({self.real + other.real}, i{self.imag + other.imag})"

#     def __sub__(self, other) -> str:
#         return f"({self.real - other.real}, i{self.imag - other.imag})"

#     def __abs__(self) -> float:
#         return self.real

#     def __eq__(self, other) -> bool:
#         return self.real == other.real and self.imag == other.imag


# # Nh·∫≠p v√† c·∫Øt chu·ªói ra
# s = input("Enter Complex(real, imag): ").split(",")
# # Eg: 1, 4 -> ["1", "4"]

# # c1 = Complex(1, 2)
# # c2 = Complex(3, 1)
# c1 = Complex(s[0], s[1])  # Complex("1", "4")

# def count_digit(n):
#     n //= 10
#     return 1 if n == 0 else 1 + count_digit(n)


# print(count_digit(130))


# def is_prime(n):
#     for i in range(2, n // 2):
#         if n % i == 0:
#             return False
#     else:
#         return True


# def print_pattern(n):
#     for i in range(1, n + 1):
#         s = str(i)
#         for j in range(i - 1, 0, -1):
#             s += f" {j}"

#         print(s)


# print_pattern(5)


# def factorial(n):
#     result = 1

#     for i in range(2, n + 1):
#         result *= i

#     return result


# def is_strong(n):
#     sum = 0

#     for i in str(n):
#         sum += factorial(int(i))

#     return sum == n


# print(f"145 {is_strong(145)}")


# def count_digit(n):
#     if n == 0:
#         return 0
#     else:
#         return 1 + count_digit(n // 10)


# print(count_digit(2423242309090))
# n == 0 -> False
# 3

# def binary_search(list, n):
#     print(list)
#     if len(list) == 1:
#         return list[0] == n

#     mid = len(list) // 2

#     if list[mid] == n:
#         return True
#     elif list[mid] > n:
#         return binary_search(list[:mid], n)
#     else:
#         return binary_search(list[mid + 1:], n)


# print(binary_search([1, 2, 3, 4, 5, 6, 7, 8], 1))

# def cal(n):
#     if n == 0:
#         raise ValueError("n can not be zero")
#     return 10 / n


# try:
#     print(cal(1))
# except ValueError as e:
#     print(e)  # n can‚Äôt not be zero

# def find_max(list):
#     if len(list) == 1:
#         return list[0]
#     else:
#         the_rest = find_max(list[1:])
#         return list[0] if list[0] > the_rest else the_rest


# print(find_max([1, 4, 2, 3, 6, 4, 6, 9]))


# def sum(l):
#     s = 0

#     for i in l:
#         s += i if type(i) == int else sum(i) if type(i) == list else 0

#     return s


# print(sum([1, 2, [3, 4, [5, 6, "text", True]]]))


# def getData(f_one, f_two):
#     def container(func):
#         def inner(param, data):
#             func(param, data)
#             new_list = []
#             mapped_data = f_one(data)
#             f_two(param, mapped_data, new_list)

#             return new_list
#         return inner
#     return container


# def f_one(data):
#     for i in range(len(data)):
#         data[i] *= 2

#     return data


# def f_two(param, data, new_list):
#     for i in data:
#         if i > param:
#             new_list.append(i)


# demo_list = [1, 2, 56, 78, 3]


# @getData(f_one, f_two)
# def check(param, data):
#     print("Do nothing here üòâ")


# number = int(input("Enter a number: "))

# data = check(number, demo_list)
# print(data)  # [112, 156]

# def deco(f):
#     def inner(*args, **kwargs):
#         print("deco")
#         f(*args, **kwargs)
#     return inner


# def hof(f):
#     def inner(*args, **kwargs):
#         print("hof")
#         f(*args, **kwargs)
#     return inner


# @deco
# @hof
# def lol(x):
#     print(x)


# lol(10)

# age = 15
# message = "L·ªõn h∆°n 30" if age >= 30 else "L·ªõn h∆°n 20" if age >= 20 else "L·ªõn h∆°n 10" if age >= 10 else "Nh·ªè h∆°n 10"
# print(message)
# print(type(range(10)))

# for name in ["Ba", "B√©o", "√ö"]:
#     if name == "√ö":
#         print("Found")
#         break
# else:
#     print("Not found")


# def sum(a, b, *numbers, **kwargs):
#     print(kwargs)
#     total = a + b

#     for n in numbers:
#         total += n if type(n) == int or type(n) == float else 0

#     for key in kwargs:
#         total += kwargs[key]

#     return total


# print(sum(1, 2, 3, 4, 5, 6, 7, 1.4, "ABC", True, c=100, d=120))


# 1. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu nh·∫≠p m·ªôt s·ªë nguy√™n n, ki·ªÉm tra v√† in ra s·ªë ƒë√≥ c√≥ chia h·∫øt cho c·∫£ 3 v√† 5 hay kh√¥ng

# V√≠ d·ª•:

# Nh·∫≠p m·ªôt s·ªë nguy√™n: 5
# 5 kh√¥ng chia h·∫øt cho c·∫£ 3 v√† 5

def check_div(n):
    return n % 3 == 0 and n % 5 == 0


# print(check_div(int(input("Nh·∫≠p n: "))))

# 2. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu nh·∫≠p 3 s·ªë a, b, c. Ki·ªÉm tra v√† in ra s·ªë l·ªõn nh·∫•t

# V√≠ d·ª•:

# Nh·∫≠p s·ªë a: 1
# Nh·∫≠p s·ªë b: 2
# Nh·∫≠p s·ªë c: 3
# S·ªë l·ªõn nh·∫•t trong 3 s·ªë[1 2 3] l√† 3
# def max_of_three(a, b, c):
#     return a if a >= b and a >= c else b if b >= a and b >= c else c


# a = int(input("Nhap a: "))
# b = int(input("Nhap b: "))
# c = int(input("Nhap c: "))
# print(max(a, b, c))
# 3. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu nh·∫≠p 3 s·ªë a, b, c t∆∞∆°ng ·ª©ng v·ªõi ƒë·ªô d√†i 3 c·∫°nh tam gi√°c. Ki·ªÉm tra v√† in ra 3 s·ªë c√≥ t·∫°o th√†nh m·ªôt tam gi√°c h·ª£p l·ªá hay kh√¥ng

# V√≠ d·ª•:

# Nh·∫≠p c·∫°nh a: 1
# Nh·∫≠p c·∫°nh b: 3
# Nh·∫≠p c·∫°nh c: 3
# [1 3 3] l√† m·ªôt tam gi√°c h·ª£p l·ªá

# def is_triangle(a, b, c):
#     return a + b > c and a + c > b and b + c > a


# a = int(input("Nhap a: "))
# b = int(input("Nhap b: "))
# c = int(input("Nhap c: "))

# print(is_triangle(a, b, c))

# 4. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu nh·∫≠p 3 s·ªë a, b, c. Ki·ªÉm tra v√† in ra 3 s·ªë l√† d√£y tƒÉng d·∫ßn(a < b < c), gi·∫£m d·∫ßn(a > b > c) hay kh√¥ng

# V√≠ d·ª•:

# Nh·∫≠p s·ªë a: 1
# Nh·∫≠p s·ªë b: 2
# Nh·∫≠p s·ªë c: 3
# [1 2 3] l√† d√£y tƒÉng d·∫ßn

# def check_arr(a, b, c):
#     if a > b > c:
#         print(f"[{a}, {b}, {c}] l√† d√£y gi·∫£m d·∫ßn")
#     elif a < b < c:
#         print(f"[{a}, {b}, {c}] l√† d√£y tƒÉng d·∫ßn")
#     else:
#         print(f"[{a}, {b}, {c}] kh√¥ng ph·∫£i d√£y gi·∫£m d·∫ßn, kh√¥ng ph·∫£i d√£y tƒÉng d·∫ßn")

# a = int(input("Nh·∫≠p v√†o s·ªë a: "))
# b = int(input("Nh·∫≠p v√†o s·ªë b: "))
# c = int(input("Nh·∫≠p v√†o s·ªë c: "))

# check_arr(a, b, c)

# 5. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu nh·∫≠p m·ªôt k√Ω t·ª±, ki·ªÉm tra v√† in ra k√Ω t·ª± ƒë√≥ c√≥ thu·ªôc b·∫£ng alphabet(a-zA-Z) hay kh√¥ng

# V√≠ d·ª•:

# Nh·∫≠p m·ªôt k√Ω t·ª±: g
# 'g' thu·ªôc b·∫£ng k√Ω t·ª± alphabet

# def char_check(char):
#     return "a" <= char.lower() <= "z"


# print(char_check(input("Nhap mot ky tu bat ky: ")))

# 6. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu nh·∫≠p m·ªôt th√°ng trong nƒÉm, ki·ªÉm tra v√† in ra m√πa t∆∞∆°ng ·ª©ng

# V√≠ d·ª•:

# Nh·∫≠p m·ªôt th√°ng b·∫•t k·ª≥: 5
# Th√°ng 5 l√† m√πa h√®


# def check_season(month):
#     season = "m√πa xu√¢n" if 1 <= month <= 3 else "m√πa h√®" if 4 <= month <= 6 else "m√πa thu" if 7 <= month <= 9 else "m√πa ƒë√¥ng" if 10 <= month <= 12 else None

#     if season:
#         print(f"Th√°ng {month} l√† {season}")
#     else:
#         print(f"Th√°ng kh√¥ng h·ª£p l·ªá")


# check_season(int(input("Nh·∫≠p m·ªôt th√°ng b·∫•t k·ª≥: ")))

# 7. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu nh·∫≠p m·ªôt s·ªë, in ra b·∫£ng c·ª≠u ch∆∞∆°ng c·ªßa s·ªë ƒë√≥

# V√≠ d·ª•:

# Nh·∫≠p m·ªôt s·ªë(1 - 9): 5
# 5 x 1 = 5
# 5 x 2 = 10
# ...

# def bcc(a):
#     if 1 <= a <= 9:
#         print(f"Bang cuu chuong cua {a} la: ")
#         for i in range(1, 11):
#             print(f"{a}  x {i:2} = {a*i:2}")


# bcc(int(input("Nhap mot so a tu 1 den 9: ")))

# 8. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu nh·∫≠p m·ªôt s·ªë nguy√™n d∆∞∆°ng n, ki·ªÉm tra c√°c s·ªë trong kho·∫£ng t·ª´ 1 - n
# - N·∫øu s·ªë chia h·∫øt cho 3 in ra Fizz
# - N·∫øu s·ªë chia h·∫øt cho 5 in ra Buzz
# - N·∫øu s·ªë chia h·∫øt cho 3 v√† 5 in ra FizzBuzz
# - N·∫øu kh√¥ng chia h·∫øt cho c·∫£ 3 v√† 5 in ra s·ªë ƒë√≥

# V√≠ d·ª•:

# Nh·∫≠p m·ªôt s·ªë nguy√™n d∆∞∆°ng: 10
# 1
# 2
# Fizz
# 4
# Buzz
# ...

# def fizzbuzz(n):
#     for i in range(1, n + 1):
#         print("FizzBuzz" if i % 3 == 0 and i % 5 == 0 else "Fizz" if i %
#               3 == 0 else "Buzz" if i % 5 == 0 else i)


# fizzbuzz(20)
# 9. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p s·ªë nguy√™n d∆∞∆°ng n t√≠nh t·ªïng t·∫•t c·∫£ c√°c s·ªë chia h·∫øt cho 3 v√† 5 trong kho·∫£ng t·ª´ 1 -> n


# def sum_to_n(n):
#     total = 0

#     for i in range(1, n + 1):
#         total += i if check_div(i) else 0

#     return total


# print(sum_to_n(30))

# 10. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p m·ªôt lo·∫°t s·ªë, t√≠nh v√† in ra trung b√¨nh c·ªông c·ªßa c√°c s·ªë ƒë√≥
# - Cho ph√©p nh·∫≠p s·ªë l∆∞·ª£ng s·ªë b·∫•t k·ª≥
# - In ra k·∫øt qu·∫£ ngay l·∫≠p t·ª©c v·ªõi m·ªói s·ªë nh·∫≠p v√†o
# - D·ª´ng nh·∫≠p v√† in ra k·∫øt qu·∫£ khi ng∆∞·ªùi d√πng nh·∫≠p 'q' ho·∫∑c 'c'

# V√≠ d·ª•:

# Nh·∫≠p m·ªôt s·ªë: 2
# D√£y s·ªë ƒë√£ nh·∫≠p: 2
# Trung b√¨nh c·ªông c√°c s·ªë: 2.0
# Nh·∫≠p m·ªôt s·ªë: 5
# D√£y s·ªë ƒë√£ nh·∫≠p: 2 5
# Trung b√¨nh c·ªông c√°c s·ªë: 3.5
# ...
# Nh·∫≠p m·ªôt s·ªë: q
# Exit!

# def avg_multiple():
#     total = 0
#     count = 0
#     list_of_numbers = ""

#     while True:
#         number = input("Enter a number: ")

#         if number.lower() == 'q' or number.lower() == 'c':
#             print("Exit")
#             return total / count
#         else:
#             count += 1
#             total += int(number)
#             list_of_numbers += " " + number
#             print(f"List of numbers: [{list_of_numbers} ]")
#             print(f"Average of numbers: {total / count}")


# print(avg_multiple())

# def to_km(value, unit):
#     if unit == "km":
#         return value
#     elif unit == "m":
#         return value * 10 ** -3
#     elif unit == "dm":
#         return value * 10 ** -4
#     elif unit == "cm":
#         return value * 10 ** -5
#     elif unit == "mm":
#         return value * 10 ** -6


# def sum(value1, unit1, value2, unit2):
#     total = to_km(value1, unit1) + to_km(value2, unit2)

#     if unit1 == "km":
#         return (total, "km")
#     elif unit1 == "m":
#         return (total * 10 ** 3, "m")
#     elif unit1 == "dm":
#         return total * 10 ** 4
#     elif unit1 == "cm":
#         return total * 10 ** 5
#     elif unit1 == "mm":
#         return total * 10 ** 6

# def is_prime(n):
#     return not (n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0)

# 1. Vi·∫øt ch∆∞∆°ng tr√¨nh g·ª£i √Ω ng∆∞·ªùi d√πng nh·∫≠p m·ªôt d√£y s·ªë t√πy √Ω (ph√¢n t√°ch b·∫±ng d·∫•u c√°ch), l∆∞u v√†o m·ªôt list. S·∫Øp x·∫øp list s·ªë ƒë√£ nh·∫≠p, sau ƒë√≥, t√¨m v√† hi·ªÉn th·ªã s·ªë l·ªõn th·ª© 3 (L∆∞u √Ω tr∆∞·ªùng h·ª£p nhi·ªÅu s·ªë tr√πng nhau)

# class Student:
#     _name = None
#     _roll = None

#     def __init__(self, name, roll) -> None:
#         self._name = name
#         self._roll = roll

#     def _display_roll(self):
#         print("Roll: ", self._roll)


# s = Student("Ba", "LoL")

# print(s._name)


_str = "This is a common interview question"


def func(_str: str) -> tuple:
    """
    H√†m n√†y t√¨m v√† tr·∫£ v·ªÅ k√Ω t·ª± c√≥ s·ªë l·∫ßn xu·∫•t hi·ªán l·ªõn nh·∫•t trong chu·ªói
    """

    _dict = dict()

    for char in _str:
        if char != " ":
            _dict[char] = _dict[char] + 1 if char in _dict else 1

    return sorted(_dict.items(), key=lambda item: item[1]).pop()


print(func(_str))
