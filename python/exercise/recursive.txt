Lưu ý, mỗi bài tập viết ra một file riêng biệt

Mô tả rõ ràng thuật toán, trình tự các câu lệnh thực thi, giá trị của biến, ... với một case bất kỳ

Ví dụ:

number = int(input("Enter a number: "))

if number % 2 == 0:
    print("Even")
else:
    print("Odd")
    
# Nhập n -> n = 1
# Kiểm tra n % 2 == 0 -> False
# In ra "Odd"

Bài tập hàm đệ quy

1. Viết hàm sum(n) nhận vào một số nguyên dương n, tính và trả về tổng các số từ 1 -> n

Ví dụ:

Nhập số nguyên dương n: 10
Tổng các số từ 1 đến 10 là 55

2. Viết hàm factorial(n) nhận vào một số nguyên dương n, tính và trả về kết quả phép tính n! (giai thừa của n)

Ví dụ:

Nhập số nguyên dương n: 5
5! = 120

1 * 2 * 3 * 4 * 5

3. Viết hàm fibonacci(n) nhận vào một số nguyên dương n, trả về số thứ n trong dãy fibonacci (dãy bắt đầu với 1 1)

Ví dụ:

Nhập số nguyên dương n: 10
Số thứ 10 trong dãy Fibonacci là 55

4. Viết hàm count_digit(n) trả về số chữ số của số nguyên n

Ví dụ:

Nhập số nguyên n: 10
Số chữ số của 10 là 2

5. Viết hàm binary_search(list, n) nhận vào một list số nguyên đã được sắp xếp, và một giá trị n. Kiểm tra giá trị n có trong list hay không, kết quả trả về True hoặc False, triển khai giải thuật tìm kiếm nhị phân

Ví dụ:

Nhập danh sách các số: 1 2 323 14 2 34 56 3
Nhập số n: 3
True

6. Viết hàm combination(n, k) nhận vào 2 số nguyên n, k, tính và trả về tổ hợp chập k của n, sử dụng đệ quy (nếu k > n => 0, k = 1 => n, k = n => 1) combination(n - 1, k) + combination(n - 1, k - 1)

7. Viết hàm sum(list) nhận vào một list chứa các số nguyên (bao gồm các sub list số nguyên khác), viết hàm tính tổng tất cả các số trong list

Ví dụ:

l = [1, 2, [3, 4], [[5, 6]], [[[7, 8]]]]
sum(l) => 36

8. Viết hàm sum(n) tính tổng dãy số 1 + 1/2 + 1/3 + 1/4 + ... + 1/n

9. Viết hàm find_max(list) nhận vào một list chứa các số nguyên dương, tìm và trả về số lớn nhất trong list

Ví dụ:

find_max([1, 4, 2, 3, 6, 4, 6, 9]) => 9
